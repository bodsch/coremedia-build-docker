#
# Copyright 2017-2021 Martin Goellnitz, Markus Schwarz.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Example starting point for a GitLab build file for CoreMedia CMCC workspaces
# to build a separate deployment script archive and maven artifact archive.
#
# Relies on the following variables to be set for maven config:
#
# CoreMedia Maven Artifacts Repository User and Password:
#   CM_MAVEN_USER
#   CM_MAVEN_PASSWORD
# Additional Maven Artifacts Repository User and Password:
#   ADD_MAVEN_USER
#   ADD_MAVEN_PASSWORD
#
# https://docs.gitlab.com/ee/ci/yaml/README.html
image: provocon/coremedia-build:latest
######################################################################
# Because $envName-Deployments are manual jobs, they could be executed without
# a prior build because in almost any cases docker container were present and
# could be deployed. So they can be executed, even if the build and push jobs
# where not executed for any reason.
######################################################################
stages:
  - build
  - push
  - deploy
  - import

variables: &dockerInDockerBuildVars
  # https://gitlab.com/gitlab-org/gitlab-runner/issues/3605
  DOCKER_STRATEGY: exec
  GIT_SUBMODULES: init
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
  # thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"

.variables: &gitlabRegistryVars
  CONT_REGISTRY: $CI_REGISTRY
  CONT_REGISTRY_PATH: "$CI_REGISTRY\\/${CI_PROJECT_NAMESPACE}\\/${CI_PROJECT_NAME}"
  CONT_REGISTRY_USER: $CI_REGISTRY_USER
  CONT_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  LEFT_OUT_CONTAINER: studio-client-k8s

# Generate and store deployment archives as docker containers
Create-Containers:
  stage: build
  variables:
    <<: *dockerInDockerBuildVars
  # Cache downloaded dependencies and plugins between builds.
  # To keep cache across branches add 'key: "$CI_JOB_NAME"'
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .remote-packages/
      - $CI_PROJECT_DIR/repository
  # https://docs.gitlab.com/runner/executors/docker.html#use-docker-in-docker-with-privileged-mode
  services:
    - docker:19.03.1-dind
  script:
    - mkdir -p ~/.m2 && cp $CI_PROJECT_DIR/workspace-configuration/maven-settings.xml ~/.m2/settings.xml
    - mkdir -p $CI_PROJECT_DIR/repository
    - mkdir -p .remote-packages
    - repoJars=$(find $CI_PROJECT_DIR/repository -type f -name "*.jar" | wc -l) && echo "[cache-check] $repoJars JARs in Maven Repository"
    - remoteFiles=$(find .remote-packages -type f | wc -l) && echo "[cache-check] $remoteFiles file in JavaScript Cache"
    # release and provider tagging
    - sed -i -e 's/customer.Blueprint..customer/customer>PROVOCON<\/customer/g' $(find -name "pom.xml"|grep blueprint-parent)
    - VERSION_AFTER=$(echo "${CI_COMMIT_REF_NAME}"|sed -e 's/^v\(.*\)-CMCC/\1/g'|sed -e 's/cmcc/1-SNAPSHOT/g')
    - VERSION_STRING=`head -15 pom.xml |tail -14 |grep version`
    - VERSION_BEFORE=`echo $VERSION_STRING|sed -e 's/.*version.\(.*\)..version.*/\1/g'`
    - echo "$VERSION_BEFORE -> $VERSION_AFTER"
    - find -name pom.xml -exec sed -i "s/version.$VERSION_BEFORE..version/version\\>$VERSION_AFTER\\<\\/version/" {} \;
    - find -name pom.xml -exec sed -i "s/\(<cm.[a-z\-]*.bp.version>\)1-SNAPSHOT\(<\/.*>\)/\1$VERSION_AFTER\2/g" {} \;
    # ToDo: Put to studio job: - test -d ~/.remote-packages && repoJs=$(find .remote-packages -type f | wc -l) && echo "[docker-volume-mount-check] $repoJs JS Codes in Sencha Repository"
    ####################################################################
    # Jangaroo unit tests were skipped with -Dskip-joo-unit-tests=true because currently they are 100% from
    # CoreMedia.
    # If we supply our own, we should enable them and should investigate, if BMPCMS-6232 is still an issue.
    #
    - | # We skip frontend and content module processing with: skipContent=true & skipThemes=true
      mvn install -Pwith-docker -Dmaven.compiler.forceJavacCompilerUse=true \
      -B --no-transfer-progress -Dorg.slf4j.simpleLogger.defaultLogLevel=warn \
      -DskipContent=true -DskipThemes=true -Dskip-joo-unit-tests=true \
      -DjooUnitWebDriverBrowserArguments=--no-sandbox,--disable-dev-shm-usage \
      -Dwebdriver.chrome.verboseLogging=true \
      -Dwebdriver.chrome.driver=/usr/bin/chromedriver \
      -Dtest='!com.coremedia.**,!ProspectServiceTest,!com.coremedia.blueprint.connectors.canto.rest.services.*' \
      -DfailIfNoTests=false
    ###################################################################
    - rm -rf $(find $CI_PROJECT_DIR/repository/com/coremedia/blueprint -type d|grep -v blueprint.base)
    - repoJars=$(find $CI_PROJECT_DIR/repository -type f -name "*.jar" | wc -l) && echo "[cache-check] $repoJars JARs in Maven Repository"
    - remoteFiles=$(find .remote-packages -type f | wc -l) && echo "[cache-check] $remoteFiles file in JavaScript Cache"
    - mkdir -p container
    - coremImages=$(docker images --filter=reference='coremedia/*:latest' --format "{{.Repository}}"|grep -v packages-proxy|grep -v site-manager)
    - |
      for coremImage in $coremImages ; do
        filename="$(echo $coremImage | sed s/coremedia.//)"
        docker image save -o container/${filename}.ci $coremImage
      done
      du -sm container/*
    - |
      for ci in $(find container -type f|grep -v ${LEFT_OUT_CONTAINER}.ci) ; do
        docker load < ${ci}
      done
    - docker images --filter=reference='coremedia/*:latest'
    - docker login -u $CONT_REGISTRY_USER -p $CONT_REGISTRY_PASSWORD $CONT_REGISTRY
    - imageTag=$(echo $CI_COMMIT_REF_NAME|sed -e 's/^v\([0-9][0-9\.]*\)-CMCC/\1/g')
    - coremImages=$(docker images --filter=reference='coremedia/*:latest' --format "{{.Repository}}")
    # We push to the branch name tags for snapshots and to $CI_COMMIT_REF_NAME and latest for releases.
    # This also is taken into account in startAll.sh. Keep in mind that this could blow disk space at the target envs
    # and in gitlab's container registry. (https://docs.gitlab.com/ee/ci/variables/predefined_variables.html)
    - |
      for coremImage in $coremImages ; do
        filename="$(echo $coremImage | sed s/coremedia.//)"
        newImageName="$(echo $coremImage | sed s/coremedia/$CONT_REGISTRY_PATH/)"
        echo "$filename: $coremImage  - $newImageName"
        if [ ! -z "$(echo $CI_COMMIT_REF_NAME|grep ^v)" ]; then docker tag $coremImage "${newImageName}:latest" ; fi
        docker tag $coremImage "${newImageName}:$imageTag"
        if [ ! -z "$(echo $CI_COMMIT_REF_NAME|grep ^v)" ]; then docker push "${newImageName}:latest" ; fi
        docker push "${newImageName}:$imageTag"
      done
